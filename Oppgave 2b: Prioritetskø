Pseudokode:

procedure balansert(heap);
    if heap== NULL;
        return

    sortert_liste = []
    while heap is not empty:
        element = heap.pop()
        sortert.add(element)

    midt = len(sortert_liste)//2 #velger øvre midten
    print(sortert_liste[midt])   #skriver ut roten først

    #Lage nye heaps for venstre og høyre side
    venstre_heap = tom venstre heap
    høyre_heap = tom høyre heap

    venstre_liste = elementer til venstre for midt
    høyre liste = elementer til høyre for midt

    venstre heap = heap med venstre_liste
    høyre heap = heap med høyre_liste
    balansert(høyre_heap)
    balansert(venstre_heap)
    
    



Implementasjon av pesudokoden:
import heapq
import sys

heap = list(map(int, sys.stdin.read().split()))

#konvertere til heap
heapq.heapify(heap)


def balansert(heap):
    if not heap:
        return
    
    sortert_liste = []
    while heap:
        sortert_liste.heappush(heap, heap.pop())

        midt = len(sortert_liste)//2 #velger øvre midten
        print(sortert_liste[midt])          #skriver ut roten først

        #Lage nye heaps for venstre og høyre side
        venstre_heap = [] 
        høyre_heap = []

        for element in sortert_liste[:midt]:
            heap.heappush(venstre_heap, element)

        for element in sortert_liste[midt +1:]:
            heap.heappush(høyre_heap, element)
    
    
        balansert(høyre_heap)
        balansert(venstre_heap)

balansert(heap)
    
