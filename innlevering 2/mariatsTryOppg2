
#MergeSort:

def MergeSort(A):
    n = len(A)
    if n <= 1:
        return A
    i = (n//2)
    Array1 = MergeSort(A[:i])
    Array2 = MergeSort(A[i:])
    return Merge(Array1, Array2, A)


def Merge(Array1, Array2, A):
    global m_swap, m_comp
    i = 0
    j = 0
    while i < len(Array1) and j < len(Array2):
        m_comp += 1
        if Array1[i] <= Array2[j]:
            m_swap += 1
            A[i+j] = Array1[i]
            i = i + 1
        else:
            m_swap += 1
            A[i+j] = Array2[j]
            j = j + 1
    while i < len(Array1):
        A[i + j] = Array1[i]
        i = i + 1
        m_swap += 1
    while j < len(Array2):
        A[i + j] = Array2[j]
        j = j + 1
        m_swap += 1
    return A
#ferdig mergesort


#Quicksort:
def ChoosePivot(A, low, high):
    global q_comp, q_swap
    midt= (low + high)//2

    a = A[low]
    b = A[midt]
    c = A[high]

    if (a<= b <=c ) or (c<= b <= a):
        q_comp += 2
        return midt
    elif (b<= a<= c) or (c<= a <= b):
        q_comp +=2
        return low
    else:
        return high


def Partition(A, low, high):
    global q_swap, q_comp
    p = ChoosePivot(A, low, high)
    A[p], A[high] = A[high], A[p]
    q_swap += 1

    pivot = A[high]
    left = low
    right = high - 1

    while left <= right:
        while left <= right and A[left] <= pivot:
            q_comp += 1
            left = left +1
        while right >= left and A[right] >= pivot:
            q_comp += 1
            right = right-1
        if left < right:
            q_swap += 1
            A[left], A[right] = A[right], A[left]
            left+=1
            right-=1
    A[left], A[high] = A[high], A[left]
    q_swap += 1
    return left

def Quicksort(A, low, high):
    global q_swap, q_comp
    if low >= high:
        q_comp += 1
        return A
    p = Partition(A, low, high)
    Quicksort(A, low, p-1)
    Quicksort(A, p+1, high)
    return A
#end quicksort

"""
#bubble og insertion:
def bubbleSort(A):
    n= len(A)+1  #Den kjører ikke nok ganger idk why, men denne redda koden
    for i in range (n-2): #egt skal det stå n-1 da vil den funke uten å endre n
        for j in range (0,n-i-2):# samme her
            if A[j] > A[j+1]:
                A[j],A[j+1]=A[j+1],A[j]
    return A


def insertion(A):
    n = len(A)
    for i in range(1,n): #måtte endre til n fordi den ikke kommer til å gå gjennom alle elementene?
        j=i
        while j>0 and A[j-1]> A[j]:
            A[j-1], A[j]=A[j],A[j-1]
            j=j-1
    return A
#ferdig bubble og insertion
"""

import time
import csv

#swap og compare

m_comp = 0
m_swap = 0
q_swap = 0
q_comp = 0

filnavn = input("Vennligst legg ved din fil:\n ")

array = []
with open(filnavn, "r") as f:
    with open(filnavn+"_results", "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(("n", "merge_cmp", "merge_swaps", "merge_time", "quicksort_cmp", "quicksort_swaps", "quicksort_time"))
        
        lesfil = f.read().split()
        for line in lesfil:
            array.append(int(line))

            m_comp = m_swap = 0
            q_comp = q_swap = 0

            m_t = time.time_ns()
            m_sortert = MergeSort(array.copy())
            m_timeus = (time.time_ns() - m_t) / 1000

            q_t = time.time_ns()
            q_sortert = Quicksort(array.copy(), 0, len(array)-1)
            q_timeus = (time.time_ns() - q_t) / 1000

            writer.writerow([len(array), m_comp, m_swap, m_timeus, q_comp, q_swap, q_timeus])

