import sys

class NodeAb:

    def __init__(self, element):
        self.element = element
        self.right = None
        self.left = None
        self.height = 0

def insert (v,x):
    if v is None:
        return NodeAb(x)

    elif x < v.element:
        v.left = insert(v.left,x)
        # print(f"Adding to left")
    elif x > v.element:
        v.right = insert(v.right,x)
        # print(f"Adding to right")
    SetHeight(v)
    return Balance(v)  #hun er nå balansert yuh
    # return v

def FindMin(x):
    if x.left is None:
        return x
    return FindMin(x.left)

def Height(v):
    if v is None:
        return -1
    return v.height

def size(v):
    if v is None:
        return 0
    return 1 + size(v.left) + size(v.right)

def SetHeight(v):
    if v is None:
        return
    v.height = 1+ max(Height(v.left),Height(v.right))

def Remove(v,x):
    if v is None:
        return None
    elif x <v.element:
        v.left = Remove(v.left,x)
        return v
    elif x>v.element:
        v.right = Remove(v.right,x)
        return v
    elif v.left is None:
        return v.right
    elif v.right is None:
        # v=v.left
        return v.left
    else:
        u = FindMin(v.right)
        v.element = u.element
        v.right = Remove(v.right, u.element)
    # return v  
    SetHeight(v)
    return Balance(v)


def LeftRotate(z):
    y=z.right
    x=y.left
    y.left=z
    z.right=x
    SetHeight(z)
    SetHeight(y)
    return y

def RightRotate(z):
    y=z.left
    x=y.right
    y.right = z
    z.left = x
    SetHeight(z)
    SetHeight(y)
    return y

def BalanceFactor(v):
    if v is None:
        return 0
    return Height(v.left) - Height(v.right)

def Balance(v):
    if BalanceFactor(v) < -1:
        if BalanceFactor(v.right) >0:
            v.right = RightRotate(v.right)
        return LeftRotate(v)
    if BalanceFactor(v) > 1:
        if BalanceFactor(v.left)<0:
            v.left = LeftRotate(v.left)
        return RightRotate(v)
    return v


def contains(v, x):
    if v is None:
        return False
    if v.element == x:
        return True
    elif x > v.element:
        return contains(v.right, x)
    else:
        return contains(v.left, x)



def sjekk(root, kommando, x):
    if kommando == "contains":
        print("true" if contains(root,x) else "false")
        return root
    elif kommando == "insert":
        return insert(root,x)
    elif kommando == "remove":
        return Remove(root,x)
    elif kommando == "size":
        print(size(root))
        return size(root)
    else:
        return root


def main():
    root = None
    # print("Skriv antall kommandoer først deretter whtvr")
    første = sys.stdin.readline().strip()
    if første is None:
        return
    ant_kommandoer = int(første.strip())
    for i in range(ant_kommandoer):
        line = sys.stdin.readline()
        if not line:
            break
        deler = line.strip().split()
        if not deler:
            continue
        kommando = deler[0]
        if len(deler)>=2:
            x=int(deler[1])
        else:
            x= None
        root = sjekk(root,kommando, x)


main()

